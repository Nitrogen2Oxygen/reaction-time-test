{"version":3,"sources":["components/Results.js","components/ReactionTest.js","components/App.js","serviceWorkerRegistration.js","index.js"],"names":["Results","props","TableContainer","Table","size","aria-label","TableHead","TableRow","TableCell","align","TableBody","stats","map","time","index","component","scope","Average","length","total","forEach","e","average","ReactionTest","useState","results","setResults","testing","setTesting","triggered","setTriggered","testTimeout","setTestTimeout","actionButton","setActionButton","useEffect","document","getElementById","style","getTimeout","Math","floor","random","setTimeout","Date","getTime","diff","Grid","container","direction","justify","item","xs","Typography","variant","List","ListItem","Divider","ActionButton","button","Button","id","color","onClick","clearTimeout","Box","backgroundColor","width","height","orientation","flexItem","disabled","App","Container","textAlign","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","theme","createMuiTheme","palette","type","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"oUASe,SAASA,EAAQC,GAC9B,OACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAOC,KAAK,SAASC,aAAW,cAAhC,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,CAAWC,MAAM,QAAjB,uBAGJ,eAACC,EAAA,EAAD,WACGT,EAAMU,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACf,eAACP,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWO,UAAU,KAAKC,MAAM,MAAhC,SACGF,EAAQ,IAEX,cAACN,EAAA,EAAD,CAAWC,MAAM,QAAjB,SAA0BI,EAAO,SAJpB,QAAUC,MAO3B,cAACG,EAAD,CAASN,MAAOV,EAAMU,gBAOhC,SAASM,EAAQhB,GACf,IAAIU,EAAQV,EAAMU,MAClB,GAAIA,EAAMO,OAAS,EACjB,OAAO,KAEP,IAAIC,EAAQ,EACZR,EAAMS,SAAQ,SAACC,GACG,iBAALA,IACTF,GAASE,MAGb,IAAIC,EAAUH,EAAQR,EAAMO,OAC5B,OACE,eAACX,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWO,UAAU,KAAKC,MAAM,MAAhC,qBAGA,cAACR,EAAA,EAAD,CAAWC,MAAM,QAAjB,SAA0Ba,EAAU,U,0CC/C7B,SAASC,IAAgB,IAAD,EACPC,mBAAS,IADF,mBAC9BC,EAD8B,KACrBC,EADqB,OAEPF,oBAAS,GAFF,mBAE9BG,EAF8B,KAErBC,EAFqB,OAGHJ,mBAAS,MAHN,mBAG9BK,EAH8B,KAGnBC,EAHmB,OAICN,mBAAS,MAJV,mBAI9BO,EAJ8B,KAIjBC,EAJiB,OAKGR,mBAAS,QALZ,mBAK9BS,EAL8B,KAKhBC,EALgB,KAkCrC,OA3BAC,qBAAU,WACR,GAAIR,EAAS,CAEXS,SAASC,eAAe,aAAaC,MAAM,oBAAsB,MACjEJ,EAAgB,cAChB,IAAIK,EAAaC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EACjDV,EACEW,YAAW,WACTP,SAASC,eAAe,aAAaC,MAAM,oBACzC,QACFR,GAAa,IAAIc,MAAOC,WACxBb,EAAe,QACD,IAAbO,QAEA,CACL,IAAKV,EAAW,OAEhB,IAAIiB,GAAO,IAAIF,MAAOC,UAAYhB,EAClCC,EAAa,MACbM,SAASC,eAAe,aAAaC,MAAM,oBAAsB,SACjEZ,EAAW,GAAD,mBAAKD,GAAL,CAAcqB,KACpBrB,EAAQP,QAAU,GACpBgB,EAAgB,eAGnB,CAACP,IAGF,eAACoB,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,SAAxC,UACE,eAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAAb,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,2BACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,+CACA,cAACA,EAAA,EAAD,gDACA,cAACA,EAAA,EAAD,mEACA,cAACA,EAAA,EAAD,yDAEJ,cAACC,EAAA,EAAD,CAASH,QAAQ,WACjB,uBACA,eAACP,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,SAAxC,UACE,eAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAAb,UACE,cAACM,EAAD,CAAcC,OAAQ1B,IACtB,uBACA,uBACA,cAAC2B,EAAA,EAAD,CAAQC,GAAG,YAAYP,QAAQ,YAAYQ,MAAM,YAAY1D,KAAK,SAAS2D,QAAS,WAEhF3B,SAASC,eAAe,aAAaC,MAAM,oBAAsB,SACjEJ,EAAgB,QAChBN,GAAW,GACXE,EAAa,MACbE,EAAegC,aAAajC,IAC5BL,EAAW,KAPf,sBAYF,cAACqB,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAAb,SACE,cAACa,EAAA,EAAD,CACEJ,GAAG,YACHvB,MAAO,CAAE4B,gBAAiB,UAC1BC,MAAM,QACNC,OAAO,kBAKf,cAACX,EAAA,EAAD,CAASY,YAAY,WAAWf,QAAQ,SAASgB,UAAQ,IACzD,eAACvB,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAAb,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,qBACA,cAACtD,EAAD,CAASW,MAAOc,UAKtB,SAASiC,EAAazD,GACpB,OAAQA,EAAM0D,QACZ,IAAK,QACH,OACE,cAACC,EAAA,EAAD,CAAQC,GAAG,gBAAgBP,QAAQ,YAAYQ,MAAM,YAAY1D,KAAK,QAAQmE,UAAQ,EAAtF,wBAIJ,IAAK,WACH,OACE,cAACX,EAAA,EAAD,CAAQC,GAAG,eAAeP,QAAQ,YAAYQ,MAAM,YAAY1D,KAAK,QAAQmE,UAAQ,EAArF,uBAIF,IAAK,aACH,OACE,cAACX,EAAA,EAAD,CAAQC,GAAG,iBAAiBP,QAAQ,YAAYQ,MAAM,UAAU1D,KAAK,QACnE2D,QAAS,WACHtC,EAAQP,QAAU,IAClBa,GAEFC,EAAegC,aAAajC,IAC5BK,SAASC,eAAe,aAAaC,MAAM,oBAAsB,SACjEJ,EAAgB,SAChBS,WAAWT,EAAiB,IAAM,UAGlCA,EAAgB,QAChBE,SAASC,eAAe,aAAaC,MAAM,oBAAsB,UAEnEV,GAAW,KAdf,wBAoBN,IAAK,OACL,QACE,OACE,cAACgC,EAAA,EAAD,CAAQC,GAAG,WAAWP,QAAQ,YAAYQ,MAAM,UAAU1D,KAAK,QAC7D2D,QAAS,WACHtC,EAAQP,QAAU,GACtBU,GAAW,IAHf,qBC1HK,SAAS4C,IACtB,OACI,eAACC,EAAA,EAAD,WACE,eAACR,EAAA,EAAD,CAAKS,UAAU,SAAf,UACQ,cAACrB,EAAA,EAAD,CAAYC,QAAQ,KAAKQ,MAAM,UAA/B,gCAGA,cAACT,EAAA,EAAD,CAAYC,QAAQ,YAAYQ,MAAM,UAAtC,0cAOA,cAACT,EAAA,EAAD,CAAYC,QAAQ,YAAYQ,MAAM,UAAtC,wPAKR,uBACA,cAACL,EAAA,EAAD,IACA,uBACA,cAAC,EAAD,OCbR,IAAMkB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,4BCvF3DC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,KAAM,UAIVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAACC,EAAA,EAAD,CAAeP,MAAOA,EAAtB,UACE,cAACQ,EAAA,EAAD,IACA,cAACrC,EAAD,SAGJpC,SAASC,eAAe,SDAnB,SAAkB8C,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI0B,IAAIC,sBAAwBlC,OAAOC,SAASkC,MACpDC,SAAWpC,OAAOC,SAASmC,OAIvC,OAGFpC,OAAOqC,iBAAiB,QAAQ,WAC9B,IAAMhC,EAAK,UAAM6B,sBAAN,sBAEPpC,IAgEV,SAAiCO,EAAOC,GAEtCgC,MAAMjC,EAAO,CACXkC,QAAS,CAAE,iBAAkB,YAE5B7B,MAAK,SAAC8B,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CrC,UAAUC,cAAcqC,MAAMnC,MAAK,SAACC,GAClCA,EAAamC,aAAapC,MAAK,WAC7BV,OAAOC,SAAS8C,eAKpB3C,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFV6B,CAAwB3C,EAAOC,GAI/BC,UAAUC,cAAcqC,MAAMnC,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OCzB/B2C,K","file":"static/js/main.30a6f57e.chunk.js","sourcesContent":["import {\n  TableContainer,\n  Table,\n  TableBody,\n  TableHead,\n  TableRow,\n  TableCell,\n} from \"@material-ui/core\";\n\nexport default function Results(props) {\n  return (\n    <TableContainer>\n      <Table size=\"medium\" aria-label=\"Trial table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Trial</TableCell>\n            <TableCell align=\"right\">Time</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {props.stats.map((time, index) => (\n            <TableRow key={\"trial\" + index}>\n              <TableCell component=\"th\" scope=\"row\">\n                {index + 1}\n              </TableCell>\n              <TableCell align=\"right\">{time + \"ms\"}</TableCell>\n            </TableRow>\n          ))}\n          <Average stats={props.stats} />\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction Average(props) {\n  var stats = props.stats;\n  if (stats.length < 1) {\n    return null;\n  } else {\n    var total = 0;\n    stats.forEach((e) => {\n      if (typeof e == \"number\") {\n        total += e;\n      }\n    });\n    var average = total / stats.length;\n    return (\n      <TableRow>\n        <TableCell component=\"th\" scope=\"row\">\n          Average\n        </TableCell>\n        <TableCell align=\"right\">{average + \"ms\"}</TableCell>\n      </TableRow>\n    );\n  }\n}\n","import Results from \"./Results\";\nimport \"./ReactionTest.css\";\nimport { useState, useEffect } from \"react\";\nimport { Box, Button, Divider, Grid, Typography, List, ListItem } from \"@material-ui/core\";\n\nexport default function ReactionTest() {\n  const [results, setResults] = useState([]);\n  const [testing, setTesting] = useState(false);\n  const [triggered, setTriggered] = useState(null);\n  const [testTimeout, setTestTimeout] = useState(null);\n  const [actionButton, setActionButton] = useState(\"main\");\n\n  useEffect(() => {\n    if (testing) {\n      // Begin test\n      document.getElementById(\"color-box\").style[\"background-color\"] = \"red\";\n      setActionButton(\"click-here\");\n      var getTimeout = Math.floor(Math.random() * 7) + 3;\n      setTestTimeout(\n        setTimeout(function () {\n          document.getElementById(\"color-box\").style[\"background-color\"] =\n            \"green\";\n          setTriggered(new Date().getTime());\n          setTestTimeout(null);\n        }, getTimeout * 1000)\n      );\n    } else {\n      if (!triggered) return;\n      // End test\n      var diff = new Date().getTime() - triggered;\n      setTriggered(null);\n      document.getElementById(\"color-box\").style[\"background-color\"] = \"yellow\";\n      setResults([...results, diff]);\n      if (results.length >= 4) {\n        setActionButton(\"finished\");\n      }\n    }\n  }, [testing]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <Grid container direction=\"row\" justify=\"center\">\n      <Grid item xs>\n        <Typography variant=\"h4\">Reaction Test</Typography>\n          <List>\n            <ListItem>1. Click the blue \"start\" button</ListItem>\n            <ListItem>2. Wait until the box turns green</ListItem>\n            <ListItem>3. Click the \"Click Here\" button as fast as possible</ListItem>\n            <ListItem>4. Do this 5 times to complete the test</ListItem>\n          </List>\n        <Divider variant=\"middle\" />\n        <br />\n        <Grid container direction=\"row\" justify=\"center\">\n          <Grid item xs>\n            <ActionButton button={actionButton} />\n            <br />\n            <br />\n            <Button id=\"reset-btn\" variant=\"contained\" color=\"secondary\" size=\"medium\" onClick={function () {\n                // Reset game\n                document.getElementById(\"color-box\").style[\"background-color\"] = \"yellow\";\n                setActionButton(\"main\");\n                setTesting(false);\n                setTriggered(null);\n                setTestTimeout(clearTimeout(testTimeout));\n                setResults([]);\n              }}>\n                Reset\n              </Button>\n          </Grid>\n          <Grid item xs>\n            <Box\n              id=\"color-box\"\n              style={{ backgroundColor: \"yellow\" }}\n              width=\"250px\"\n              height=\"250px\"\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Divider orientation=\"vertical\" variant=\"middle\" flexItem />\n      <Grid item xs>\n        <Typography variant=\"h4\">Results</Typography>\n        <Results stats={results} />\n      </Grid>\n    </Grid>\n  );\n\n  function ActionButton(props) {\n    switch (props.button) {\n      case \"early\":\n        return (\n          <Button id=\"too-early-btn\" variant=\"contained\" color=\"secondary\" size=\"large\" disabled>\n            Too Early!\n          </Button>\n        );\n      case \"finished\":\n        return (\n          <Button id=\"finished-btn\" variant=\"contained\" color=\"secondary\" size=\"large\" disabled>\n            Finished!\n          </Button>\n        );\n        case \"click-here\":\n          return (\n            <Button id=\"click-here-btn\" variant=\"contained\" color=\"primary\" size=\"large\"\n              onClick={function () {\n                if (results.length >= 5) return;\n                if (testTimeout) {\n                  // Too early\n                  setTestTimeout(clearTimeout(testTimeout));\n                  document.getElementById(\"color-box\").style[\"background-color\"] = \"yellow\";\n                  setActionButton(\"early\");\n                  setTimeout(setActionButton, 2000, \"main\");\n                } else {\n                  // Hit\n                  setActionButton(\"main\");\n                  document.getElementById(\"color-box\").style[\"background-color\"] = \"yellow\";\n                }\n                setTesting(false);\n              }}\n            >\n              Click Here\n            </Button>\n          );\n      case \"main\":\n      default:\n        return (\n          <Button id=\"main-btn\" variant=\"contained\" color=\"primary\" size=\"large\"\n            onClick={function () {\n              if (results.length >= 5) return;\n              setTesting(true);\n            }}\n          >\n            Start\n          </Button>\n        );\n    }\n  }\n}\n","import { Divider, Container, Typography, Box } from '@material-ui/core';\nimport ReactionTest from \"./ReactionTest\";\n\nexport default function App() {\n  return (\n      <Container>\n        <Box textAlign=\"center\">\n                <Typography variant=\"h3\" color=\"inherit\">\n                    Reaction Time Test\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"inherit\">\n                    This is a reaction time test (built with React haha).\n                    You will click a button and wait for it to change colors, then click it again as soon as possible.\n                    The test is measured in milliseconds (1ms = 1/1000 seconds).\n                    You will complete 5 trials of this, each being recorded on the right, with the average performance being on the bottom.\n                    This test is not 100% accurate and is limited by computer and browser performance, as well as basic input lag.\n                </Typography>\n                <Typography variant=\"subtitle2\" color=\"inherit\">\n                    IMPORTANT: Certain privacy related browser settings on Firefox will make this test less accurate. \n                    For the most accurate times, please disable the \"privacy.reduceTimerPrecision\" or change the value of \"privacy.resistFingerprinting.\" \n                </Typography>\n        </Box>\n        <br />\n        <Divider />\n        <br />\n        <ReactionTest />\n      </Container>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport { createMuiTheme, CssBaseline, ThemeProvider } from '@material-ui/core';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}